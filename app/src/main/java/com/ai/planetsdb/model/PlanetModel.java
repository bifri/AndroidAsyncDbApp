package com.ai.planetsdb.model;

import android.content.Intent;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;

import com.ai.planetsdb.provider.PlanetsContract;
import com.ai.planetsdb.util.DoublesCompare;
import com.ai.planetsdb.util.Utils;

public class PlanetModel implements Parcelable {
//  public String mUri = null;
    public long mId = -1;
    public String mName;
    public double mDiameter;
    public double mDistance;
    public boolean mHasAtmosphere;
    public String mDiscoverer;

    public PlanetModel() { }

    public PlanetModel(Intent intent) {
        this();

        if (intent == null) {
            return;
        }

        String name = intent.getStringExtra(PlanetsContract.PLANET_NAME);
        if (name != null) {
            mName = name;
        }

        double distance = intent.getDoubleExtra(PlanetsContract.DISTANCE_FROM_EARTH, -1.0);
        if (!DoublesCompare.equals(distance, -1.0)) {
            mDistance = distance;
        }

        double diameter = intent.getDoubleExtra(PlanetsContract.DIAMETER, -1.0);
        if (!DoublesCompare.equals(diameter, -1.0)) {
            mDiameter = diameter;
        }

        String discoverer = intent.getStringExtra(PlanetsContract.DISCOVERER);
        if (discoverer != null) {
            mDiscoverer = discoverer;
        }

        int atmosphere = intent.getIntExtra(PlanetsContract.HAS_ATMOSPHERE, -1);
        if (atmosphere != -1) {
            mHasAtmosphere = atmosphere > 0;
        }
    }

    public void clear() {
//      mUri = null;
        mId = -1;
        mName = null;
        mDiameter = 0.0;
        mDistance = 0.0;
        mHasAtmosphere = false;
        mDiscoverer = null;
    }

    public void consume(PlanetModel model) {
//      mUri = model.mUri;
        mId = model.mId;
        mName = model.mName;
        mDiameter = model.mDiameter;
        mDistance = model.mDistance;
        mHasAtmosphere = model.mHasAtmosphere;
        mDiscoverer = model.mDiscoverer;
    }

    /**
     * Whether the planet has been modified based on its original model.
     *
     * @param originalModel original model
     * @return true if the model is unchanged, false otherwise
     */
    public boolean isUnchanged(PlanetModel originalModel) {
        if (this == originalModel) {
            return true;
        }
        if (originalModel == null) {
            return false;
        }

/*
        if (TextUtils.isEmpty(mUri)) {
            if (!TextUtils.isEmpty(originalModel.mUri)) { return false; }
        } else if (!mUri.equals(originalModel.mUri)) { return false; }
*/

        if (mId != originalModel.mId) { return false; }

        if (TextUtils.isEmpty(mName)) {
            if (!TextUtils.isEmpty(originalModel.mName)) { return false; }
        } else if (!mName.equals(originalModel.mName)) { return false; }

        if (!DoublesCompare.equals(mDiameter, originalModel.mDiameter)) {
            return false;
        }

        if (!DoublesCompare.equals(mDistance, originalModel.mDistance)) {
            return false;
        }

        if (mHasAtmosphere != originalModel.mHasAtmosphere) { return false; }

        if (TextUtils.isEmpty(mDiscoverer)) {
            if (!TextUtils.isEmpty(originalModel.mDiscoverer)) { return false; }
        } else if (!mDiscoverer.equals(originalModel.mDiscoverer)) { return false; }

        return true;
    }

    public int getValidity() {
        int errors = 0;

        if (mName == null) { errors ^= Utils.ERROR_EMPTY_NAME; }

        return errors;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        long temp;
//      result = prime * result + ((mUri == null) ? 0 : mUri.hashCode());
        result = prime * result + (int) (mId ^ (mId >>> 32));
        result = prime * result + ((mName == null) ? 0 : mName.hashCode());
        temp = Double.doubleToLongBits(mDiameter);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(mDistance);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        result = prime * result + (mHasAtmosphere ? 1231 : 1237);
        result = prime * result + ((mDiscoverer == null) ? 0 : mDiscoverer.hashCode());
        return result;
    }

    // Autogenerated equals method
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || !(o instanceof PlanetModel)) return false;

        PlanetModel that = (PlanetModel) o;

        if (mHasAtmosphere != that.mHasAtmosphere) return false;
        if (!DoublesCompare.equals(mDiameter, that.mDiameter)) return false;
        if (!DoublesCompare.equals(mDistance, that.mDistance)) return false;
        if (mId != that.mId) return false;

        if (mDiscoverer == null) {
            if (that.mDiscoverer != null) {
                return false;
            }
        } else if (!mDiscoverer.equals(that.mDiscoverer)) {
            return false;
        }

        if (mName == null) {
            if (that.mName != null) {
                return false;
            }
        } else if (!mName.equals(that.mName)) {
            return false;
        }

/*      if (mUri == null) {
            if (that.mUri != null) {
                return false;
            }
        } else if (!mUri.equals(that.mUri)) {
            return false;
        }*/
        return true;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
//      dest.writeString(mUri);
        dest.writeLong(mId);
        dest.writeString(mName);
        dest.writeDouble(mDiameter);
        dest.writeDouble(mDistance);
        dest.writeInt(mHasAtmosphere ? 1 : 0);
        dest.writeString(mDiscoverer);
    }

    private PlanetModel(Parcel in) {
//      mUri = in.readString();
        mId = in.readLong();
        mName = in.readString();
        mDiameter = in.readDouble();
        mDistance = in.readDouble();
        mHasAtmosphere = (in.readInt() > 0);
        mDiscoverer = in.readString();
    }

    public static final Parcelable.Creator<PlanetModel> CREATOR =
            new Parcelable.Creator<PlanetModel>() {

        @Override
        public PlanetModel createFromParcel(Parcel in) { return new PlanetModel(in); }

        @Override
        public PlanetModel[] newArray(int size) { return new PlanetModel[size]; }
    };

    /*
     * (Autogenerated method)
     */
    @Override
    public String toString() {
        return "PlanetModel{" +
                "mId=" + mId +
                ", mName='" + mName + '\'' +
                ", mDiameter=" + mDiameter +
                ", mDistance=" + mDistance +
                ", mHasAtmosphere=" + mHasAtmosphere +
                ", mDiscoverer='" + mDiscoverer + '\'' +
                '}';
    }

    @Override
    public int describeContents() { return 0; }
}